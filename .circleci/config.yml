version: 2

references:
  default_docker_ruby_executor: &default_docker_ruby_executor
    image: circleci/ruby:2.6.5-stretch-node
    environment:
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      BUNDLE_PATH: vendor/bundle
      RAILS_ENV: test
  postgres: &postgres
    image: circleci/mysql:5.7
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'

jobs:
  test:
    docker:
      - *default_docker_ruby_executor
      - *postgres
    steps:
      - checkout
      # Which version of bundler?
      - run:
          name: Which bundler?
          command: gem install bundler && bundle -v
      # bundle cache
      - restore_cache:
          keys:
            - rails-subscription-sample-bundle-{{ checksum "Gemfile.lock" }}
            -  rails-subscription-sample
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      # Store bundle cache
      - save_cache:
          key:  rails-subscription-sample-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - rails-subscription-sample-yarn-{{ checksum "yarn.lock" }}
            - rails-subscription-sample-yarn-
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      # Store yarn / webpacker cache
      - save_cache:
          key:  rails-subscription-sample-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:drop db:create db:migrate
      - run:
          command: bundle exec rspec

workflows:
  version: 2
  run_test:
    jobs:
      - test
